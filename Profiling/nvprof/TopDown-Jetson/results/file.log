	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.563103 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1065.52% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.37%  ║  ║ STALLS, on the total (%):  92.62%  ║  ║ IPC DEGRADATION (%):  0.1%   ║  ║ PERFORMANCE IPC (%):  9.385% ║  
║ IPC DEGRADATION      (%):  6.671% ║  ║ IPC DEGRADATION      (%):  83.835% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.90%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.73%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.99% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.569104 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563103 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806905 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15636072 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.567697 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1056.9% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.24%  ║  ║ STALLS, on the total (%):  92.75%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.462% ║  
║ IPC DEGRADATION      (%):  6.555% ║  ║ IPC DEGRADATION      (%):  83.974% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.30%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.65%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.12% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.557352 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.567697 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807240 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15801939 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.567232 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1057.77% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.47%  ║  ║ STALLS, on the total (%):  92.55% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.454% ║  
║ IPC DEGRADATION      (%):  6.764% ║  ║ IPC DEGRADATION      (%):  83.8%  ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.95%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.76%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.37%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.89% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567226 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.567232 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807307 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15526987 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.569167 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1054.17% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.46%  ║  ║ STALLS, on the total (%):  92.54%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.486% ║  
║ IPC DEGRADATION      (%):  6.752% ║  ║ IPC DEGRADATION      (%):  83.762% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.40%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.76%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.89% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.566016 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.569167 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807169 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15559932 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲ ̲̲̲T̲̲̲o̲̲̲p̲̲̲D̲̲̲o̲̲̲w̲̲̲n̲̲̲ ̲̲̲M̲̲̲e̲̲̲t̲̲̲h̲̲̲o̲̲̲l̲̲̲o̲̲̲d̲̲̲g̲̲̲y̲̲̲ ̲̲̲o̲̲̲v̲̲̲e̲̲̲r̲̲̲ ̲̲̲N̲̲̲V̲̲̲I̲̲̲D̲̲̲I̲̲̲A̲̲̲'̲̲̲s̲̲̲ ̲̲̲G̲̲̲P̲̲̲U̲̲̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.563687 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1064.42% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲ ̲̲̲D̲̲̲E̲̲̲S̲̲̲C̲̲̲R̲̲̲I̲̲̲P̲̲̲T̲̲̲I̲̲̲O̲̲̲N̲̲̲ ̲̲̲O̲̲̲F̲̲̲ ̲̲̲M̲̲̲E̲̲̲A̲̲̲S̲̲̲U̲̲̲R̲̲̲E̲̲̲ ̲̲̲P̲̲̲A̲̲̲R̲̲̲T̲̲̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.4%   ║  ║ STALLS, on the total (%):  92.59%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.395% ║  
║ IPC DEGRADATION      (%):  6.705% ║  ║ IPC DEGRADATION      (%):  83.891% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲ ̲̲̲
̲̲̲
̲̲̲L̲̲̲i̲̲̲s̲̲̲t̲̲̲ ̲̲̲o̲̲̲f̲̲̲ ̲̲̲c̲̲̲o̲̲̲u̲̲̲n̲̲̲t̲̲̲e̲̲̲r̲̲̲s̲̲̲/̲̲̲m̲̲̲e̲̲̲t̲̲̲r̲̲̲i̲̲̲c̲̲̲s̲̲̲ ̲̲̲m̲̲̲e̲̲̲a̲̲̲s̲̲̲u̲̲̲r̲̲̲e̲̲̲d̲̲̲ ̲̲̲a̲̲̲c̲̲̲c̲̲̲o̲̲̲r̲̲̲d̲̲̲i̲̲̲n̲̲̲g̲̲̲ ̲̲̲t̲̲̲o̲̲̲ ̲̲̲t̲̲̲h̲̲̲e̲̲̲ ̲̲̲p̲̲̲a̲̲̲r̲̲̲t̲̲̲.̲̲̲
̲̲̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.72%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.94% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.563628 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563687 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807309 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531297 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15619896 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲T̲̲̲o̲̲̲p̲̲̲D̲̲̲o̲̲̲w̲̲̲n̲̲̲ ̲̲̲M̲̲̲e̲̲̲t̲̲̲h̲̲̲o̲̲̲l̲̲̲o̲̲̲d̲̲̲g̲̲̲y̲̲̲ ̲̲̲o̲̲̲v̲̲̲e̲̲̲r̲̲̲ ̲̲̲N̲̲̲V̲̲̲I̲̲̲D̲̲̲I̲̲̲A̲̲̲'̲̲̲s̲̲̲ ̲̲̲G̲̲̲P̲̲̲U̲̲̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.555139 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1080.81% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲D̲̲̲E̲̲̲S̲̲̲C̲̲̲R̲̲̲I̲̲̲P̲̲̲T̲̲̲I̲̲̲O̲̲̲N̲̲̲ ̲̲̲O̲̲̲F̲̲̲ ̲̲̲M̲̲̲E̲̲̲A̲̲̲S̲̲̲U̲̲̲R̲̲̲E̲̲̲ ̲̲̲P̲̲̲A̲̲̲R̲̲̲T̲̲̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.34%  ║  ║ STALLS, on the total (%):  92.67%  ║  ║ IPC DEGRADATION (%):  0.21%  ║  ║ PERFORMANCE IPC (%):  9.252% ║  
║ IPC DEGRADATION      (%):  6.645% ║  ║ IPC DEGRADATION      (%):  83.901% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲
̲̲̲
̲̲̲L̲̲̲i̲̲̲s̲̲̲t̲̲̲ ̲̲̲o̲̲̲f̲̲̲ ̲̲̲c̲̲̲o̲̲̲u̲̲̲n̲̲̲t̲̲̲e̲̲̲r̲̲̲s̲̲̲/̲̲̲m̲̲̲e̲̲̲t̲̲̲r̲̲̲i̲̲̲c̲̲̲s̲̲̲ ̲̲̲m̲̲̲e̲̲̲a̲̲̲s̲̲̲u̲̲̲r̲̲̲e̲̲̲d̲̲̲ ̲̲̲a̲̲̲c̲̲̲c̲̲̲o̲̲̲r̲̲̲d̲̲̲i̲̲̲n̲̲̲g̲̲̲ ̲̲̲t̲̲̲o̲̲̲ ̲̲̲t̲̲̲h̲̲̲e̲̲̲ ̲̲̲p̲̲̲a̲̲̲r̲̲̲t̲̲̲.̲̲̲
̲̲̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.96%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.02% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567763 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.555139 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807287 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15512250 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.53966 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1111.81% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.05%  ║  ║ STALLS, on the total (%):  92.95% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  8.994% ║  
║ IPC DEGRADATION      (%):  6.416% ║  ║ IPC DEGRADATION      (%):  84.59% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.90%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.19%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.62%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.33% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.47%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.529155 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.539660 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807419 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               16644297 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.533902 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1123.8% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  6.98%  ║  ║ STALLS, on the total (%):  93.02%  ║  ║ IPC DEGRADATION (%):  0.077% ║  ║ PERFORMANCE IPC (%):  8.898% ║  
║ IPC DEGRADATION      (%):  6.354% ║  ║ IPC DEGRADATION      (%):  84.671% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.89%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.11%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.64%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.41% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.46%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.538509 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.533902 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807195 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               16491271 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly! ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.563491 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1064.79% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
 ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.16%  ║  ║ STALLS, on the total (%):  92.83%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.392% ║  
║ IPC DEGRADATION      (%):  6.488% ║  ║ IPC DEGRADATION      (%):  84.112% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.25%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.65%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.20% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.563161 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563491 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807159 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15625325 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly! ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.566437 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1059.25% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
 ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.32%  ║  ║ STALLS, on the total (%):  92.69%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.441% ║  
║ IPC DEGRADATION      (%):  6.629% ║  ║ IPC DEGRADATION      (%):  83.939% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.34%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.03% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.562907 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.566437 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807083 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15544046 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly! ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.564739 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1062.44% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
 ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.35%  ║  ║ STALLS, on the total (%):  92.65%  ║  ║ IPC DEGRADATION (%):  0.08%  ║  ║ PERFORMANCE IPC (%):  9.412% ║  
║ IPC DEGRADATION      (%):  6.652% ║  ║ IPC DEGRADATION      (%):  83.855% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.00% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.569542 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.564739 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807230 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15463698 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly! ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.564635 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1062.63% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
 ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.29%  ║  ║ STALLS, on the total (%):  92.7%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.411% ║  
║ IPC DEGRADATION      (%):  6.604% ║  ║ IPC DEGRADATION      (%):  83.976% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲. ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.33%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.564135 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.564635 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807203 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15611864 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56392 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1063.98% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.41%  ║  ║ STALLS, on the total (%):  92.59%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.399% ║  
║ IPC DEGRADATION      (%):  6.714% ║  ║ IPC DEGRADATION      (%):  83.888% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲. ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.73%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.95% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.563403 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563920 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807304 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15613439 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.568277 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1055.82% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.29%  ║  ║ STALLS, on the total (%):  92.71%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.471% ║  
║ IPC DEGRADATION      (%):  6.6%   ║  ║ IPC DEGRADATION      (%):  83.929% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲. ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.34%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.07% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.563114 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.568277 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807124 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15640033 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.565692 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1060.65% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.29%  ║  ║ STALLS, on the total (%):  92.73%  ║  ║ IPC DEGRADATION (%):  0.016% ║  ║ PERFORMANCE IPC (%):  9.428% ║  
║ IPC DEGRADATION      (%):  6.602% ║  ║ IPC DEGRADATION      (%):  83.972% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.35%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.07% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.566665 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.565692 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807311 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15564526 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.567755 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1056.79% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.35%  ║  ║ STALLS, on the total (%):  92.65%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.463% ║  
║ IPC DEGRADATION      (%):  6.655% ║  ║ IPC DEGRADATION      (%):  83.883% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.40%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.99% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.566052 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.567755 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807299 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15507961 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56355 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1064.68% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.27%  ║  ║ STALLS, on the total (%):  92.72%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.393% ║  
║ IPC DEGRADATION      (%):  6.587% ║  ║ IPC DEGRADATION      (%):  84.011% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.66%   ║  ║ STALLS, on the total (%):  2.61%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.63%  ║  
║ STALLS, on FrontEnd  (%):  64.099% ║  ║ STALLS, on FrontEnd  (%):  35.901% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.222%  ║  ║ IPC DEGRADATION      (%):  2.365%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.93%  ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total (%):  0.07%             ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.076% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound  (%):  0.075%         ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION      (%):  0.063%            ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t
- FRONT-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.31%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------

- FRONT_END.BAND_WIDTH RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.31%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------

- FRONT_END.DEPENDENCY RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			-------------------------------------------------------------------------------------------------------

- BACK-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.08% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------

- BACK_END.CORE_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			-------------------------------------------------------------------------------------------------------

- BACK_END.MEMORY_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.08% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------

- MEMORY_BOUND.CONSTANT_MEMORY_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			-------------------------------------------------------------------------------------------------------

- DIVERGENCE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.558307 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------

- RETIRE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563550 
			-------------------------------------------------------------------------------------------------------

- EXTRA_MEASURE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807174 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15623674 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.552436 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1086.1% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.39%  ║  ║ STALLS, on the total (%):  92.62%  ║  ║ IPC DEGRADATION (%):  0.246% ║  ║ PERFORMANCE IPC (%):  9.207% ║  
║ IPC DEGRADATION      (%):  6.691% ║  ║ IPC DEGRADATION      (%):  83.865% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.74%   ║  ║ STALLS, on the total (%):  2.65%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.52%  ║  
║ STALLS, on FrontEnd  (%):  64.141% ║  ║ STALLS, on FrontEnd  (%):  35.859% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.292%  ║  ║ IPC DEGRADATION      (%):  2.399%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.774% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total (%):  0.07%             ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.076% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound  (%):  0.076%         ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION      (%):  0.063%            ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t
- FRONT-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.96%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------

- FRONT_END.BAND_WIDTH RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------

- FRONT_END.DEPENDENCY RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.96%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			-------------------------------------------------------------------------------------------------------

- BACK-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.96% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------

- BACK_END.CORE_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------

- BACK_END.MEMORY_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.96% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------

- MEMORY_BOUND.CONSTANT_MEMORY_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			-------------------------------------------------------------------------------------------------------

- DIVERGENCE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567184 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------

- RETIRE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.552436 
			-------------------------------------------------------------------------------------------------------

- EXTRA_MEASURE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807114 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15938002 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  2                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56827 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1055.84% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.37%  ║  ║ STALLS, on the total (%):  92.63%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.471% ║  
║ IPC DEGRADATION      (%):  6.672% ║  ║ IPC DEGRADATION      (%):  83.857% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.74%   ║  ║ STALLS, on the total (%):  2.63%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.53%  ║  
║ STALLS, on FrontEnd  (%):  64.315% ║  ║ STALLS, on FrontEnd  (%):  35.685% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.291%  ║  ║ IPC DEGRADATION      (%):  2.381%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.766% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.99% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.99% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567545 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.568270 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807123 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15517923 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.565923 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1060.21% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.37%  ║  ║ STALLS, on the total (%):  92.62%  ║  ║ IPC DEGRADATION (%):  0.051% ║  ║ PERFORMANCE IPC (%):  9.432% ║  
║ IPC DEGRADATION      (%):  6.671% ║  ║ IPC DEGRADATION      (%):  83.837% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲tAnalysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.567875 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1056.57% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.33%  ║  ║ STALLS, on the total (%):  92.67%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.465% ║  
║ IPC DEGRADATION      (%):  6.636% ║  ║ IPC DEGRADATION      (%):  83.899% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲tAnalysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.561346 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1068.86% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.4%   ║  ║ STALLS, on the total (%):  92.59%  ║  ║ IPC DEGRADATION (%):  0.039% ║  ║ PERFORMANCE IPC (%):  9.356% ║  
║ IPC DEGRADATION      (%):  6.705% ║  ║ IPC DEGRADATION      (%):  83.891% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲tAnalysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.564343 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1063.18% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.32%  ║  ║ STALLS, on the total (%):  92.68% ║  ║ IPC DEGRADATION (%):  0.024% ║  ║ PERFORMANCE IPC (%):  9.406% ║  
║ IPC DEGRADATION      (%):  6.63%  ║  ║ IPC DEGRADATION      (%):  83.94% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲tAnalysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56704 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1058.13% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.34%  ║  ║ STALLS, on the total (%):  92.68%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.451% ║  
║ IPC DEGRADATION      (%):  6.646% ║  ║ IPC DEGRADATION      (%):  83.921% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.36%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.05% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.564077 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.567040 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806926 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.559167 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1073.02% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.39%  ║  ║ STALLS, on the total (%):  92.62%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.319% ║  
║ IPC DEGRADATION      (%):  6.701% ║  ║ IPC DEGRADATION      (%):  83.988% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
 ̲B̲A̲C̲K̲-̲E̲N̲D
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15877165 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.554285 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1082.48% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.29%  ║  ║ STALLS, on the total (%):  92.72%  ║  ║ IPC DEGRADATION (%):  0.298% ║  ║ PERFORMANCE IPC (%):  9.238% ║  
║ IPC DEGRADATION      (%):  6.595% ║  ║ IPC DEGRADATION      (%):  83.878% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.91%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.08% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.572161 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.554285 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806916 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15884823 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.555384 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1080.33% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.02%  ║  ║ STALLS, on the total (%):  92.97%  ║  ║ IPC DEGRADATION (%):  0.024% ║  ║ PERFORMANCE IPC (%):  9.256% ║  
║ IPC DEGRADATION      (%):  6.368% ║  ║ IPC DEGRADATION      (%):  84.342% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.87%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.22%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.60%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.33%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.36% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.47%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.556854 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.555384 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806763 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15853398 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.569851 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1052.91% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.31%  ║  ║ STALLS, on the total (%):  92.68%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.498% ║  
║ IPC DEGRADATION      (%):  6.616% ║  ║ IPC DEGRADATION      (%):  83.878% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲B̲A̲C̲K̲-̲E̲N̲D
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15450937 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.565961 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1060.14% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.36%  ║  ║ STALLS, on the total (%):  92.65%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.433% ║  
║ IPC DEGRADATION      (%):  6.666% ║  ║ IPC DEGRADATION      (%):  83.911% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15574875 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  2                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.554697 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1081.67% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.25%  ║  ║ STALLS, on the total (%):  92.75%  ║  ║ IPC DEGRADATION (%):  0.242% ║  ║ PERFORMANCE IPC (%):  9.245% ║  
║ IPC DEGRADATION      (%):  6.562% ║  ║ IPC DEGRADATION      (%):  83.951% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.68%   ║  ║ STALLS, on the total (%):  2.57%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.65%  ║  
║ STALLS, on FrontEnd  (%):  64.552% ║  ║ STALLS, on FrontEnd  (%):  35.448% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.236%  ║  ║ IPC DEGRADATION      (%):  2.326%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.861% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.12% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15472784 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  2                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.563253 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1065.24% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.31%  ║  ║ STALLS, on the total (%):  92.68%  ║  ║ IPC DEGRADATION (%):  0.089% ║  ║ PERFORMANCE IPC (%):  9.388% ║  
║ IPC DEGRADATION      (%):  6.617% ║  ║ IPC DEGRADATION      (%):  83.897% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.7%    ║  ║ STALLS, on the total (%):  2.61%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.59%  ║  
║ STALLS, on FrontEnd  (%):  64.295% ║  ║ STALLS, on FrontEnd  (%):  35.705% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.255%  ║  ║ IPC DEGRADATION      (%):  2.363%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.816% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15631913 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  2                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.554274 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1082.5% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.3%   ║  ║ STALLS, on the total (%):  92.7%   ║  ║ IPC DEGRADATION (%):  0.215% ║  ║ PERFORMANCE IPC (%):  9.238% ║  
║ IPC DEGRADATION      (%):  6.61%  ║  ║ IPC DEGRADATION      (%):  83.938% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.71%   ║  ║ STALLS, on the total (%):  2.59%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.61%  ║  
║ STALLS, on FrontEnd  (%):  64.521% ║  ║ STALLS, on FrontEnd  (%):  35.479% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.265%  ║  ║ IPC DEGRADATION      (%):  2.345%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.856% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.36%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.36%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.05% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.05% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567150 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.554274 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807256 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56014 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1071.16% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.34%  ║  ║ STALLS, on the total (%):  92.67%  ║  ║ IPC DEGRADATION (%):  0.12%  ║  ║ PERFORMANCE IPC (%):  9.336% ║  
║ IPC DEGRADATION      (%):  6.646% ║  ║ IPC DEGRADATION      (%):  83.907% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.72%   ║  ║ STALLS, on the total (%):  2.62%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.57%  ║  
║ STALLS, on FrontEnd  (%):  64.305% ║  ║ STALLS, on FrontEnd  (%):  35.695% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.274%  ║  ║ IPC DEGRADATION      (%):  2.372%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.817% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total (%):  0.07%             ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.076% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound  (%):  0.076%         ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION      (%):  0.063%            ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15718782 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.569804 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1052.99% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.34%  ║  ║ STALLS, on the total (%):  92.66%  ║  ║ IPC DEGRADATION (%):  0.018% ║  ║ PERFORMANCE IPC (%):  9.497% ║  
║ IPC DEGRADATION      (%):  6.642% ║  ║ IPC DEGRADATION      (%):  83.844% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.564483 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1062.92% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.24%  ║  ║ STALLS, on the total (%):  92.74%  ║  ║ IPC DEGRADATION (%):  0.047% ║  ║ PERFORMANCE IPC (%):  9.408% ║  
║ IPC DEGRADATION      (%):  6.555% ║  ║ IPC DEGRADATION      (%):  83.972% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.66%   ║  ║ STALLS, on the total (%):  2.58%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.65%  ║  
║ STALLS, on FrontEnd  (%):  64.365% ║  ║ STALLS, on FrontEnd  (%):  35.635% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.219%  ║  ║ IPC DEGRADATION      (%):  2.336%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.89%  ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total (%):  0.04%             ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound  (%):  0.043%         ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION      (%):  0.036%            ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.88%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.31%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.70%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.31%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.88%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.70%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.13% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.13% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567284 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.564483 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806969 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15597856 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.569619 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1053.34% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.32%  ║  ║ STALLS, on the total (%):  92.68%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.494% ║  
║ IPC DEGRADATION      (%):  6.625% ║  ║ IPC DEGRADATION      (%):  83.881% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.7%    ║  ║ STALLS, on the total (%):  2.62%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.59%  ║  
║ STALLS, on FrontEnd  (%):  64.208% ║  ║ STALLS, on FrontEnd  (%):  35.792% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.254%  ║  ║ IPC DEGRADATION      (%):  2.371%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.8%   ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total      (%):  0.04%        ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound         (%):  0.043%  ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION             (%):  0.036%     ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.35%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.70%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.35%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.70%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.568929 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.569619 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807293 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15480480 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.561482 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1068.6% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.41%  ║  ║ STALLS, on the total (%):  92.59%  ║  ║ IPC DEGRADATION (%):  0.111% ║  ║ PERFORMANCE IPC (%):  9.358% ║  
║ IPC DEGRADATION      (%):  6.708% ║  ║ IPC DEGRADATION      (%):  83.822% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.73%   ║  ║ STALLS, on the total (%):  2.68%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.49%  ║  
║ STALLS, on FrontEnd  (%):  63.833% ║  ║ STALLS, on FrontEnd  (%):  36.167% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.282%  ║  ║ IPC DEGRADATION      (%):  2.426%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.732% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔════════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND             ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------             ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total              (%):  0.04%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043%   ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.043%   ║  ║  ║  ║  ║  ║  ║  
║                                                ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.036%   ║  ║  ║  ║  ║  ║  ║  
╚════════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.75%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.75%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.96% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.96% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.568155 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.561482 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806790 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15500695 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.571053 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1050.69% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.31%  ║  ║ STALLS, on the total (%):  92.69%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.518% ║  
║ IPC DEGRADATION      (%):  6.614% ║  ║ IPC DEGRADATION      (%):  83.868% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.72%   ║  ║ STALLS, on the total (%):  2.59%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.59%  ║  
║ STALLS, on FrontEnd  (%):  64.569% ║  ║ STALLS, on FrontEnd  (%):  35.431% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.271%  ║  ║ IPC DEGRADATION      (%):  2.343%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.778% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔═══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND            ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------            ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total             (%):  0.04%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.043%  ║  ║  ║  ║  ║  ║  ║  
║                                               ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.036%  ║  ║  ║  ║  ║  ║  ║  
╚═══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567529 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.571053 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807105 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15418415 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.565562 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1060.89% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.39%  ║  ║ STALLS, on the total (%):  92.61%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.426% ║  
║ IPC DEGRADATION      (%):  6.693% ║  ║ IPC DEGRADATION      (%):  83.881% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.75%   ║  ║ STALLS, on the total (%):  2.64%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.51%  ║  
║ STALLS, on FrontEnd  (%):  64.276% ║  ║ STALLS, on FrontEnd  (%):  35.724% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.302%  ║  ║ IPC DEGRADATION      (%):  2.391%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.79%  ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total            (%):  0.04%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.043% ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.036% ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.90%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.74%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.90%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.74%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.98% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.98% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.562520 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.565562 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807072 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15568111 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.565649 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1060.73% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.34%  ║  ║ STALLS, on the total (%):  92.66%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.427% ║  
║ IPC DEGRADATION      (%):  6.648% ║  ║ IPC DEGRADATION      (%):  83.924% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.7%    ║  ║ STALLS, on the total (%):  2.64%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.56%  ║  
║ STALLS, on FrontEnd  (%):  64.033% ║  ║ STALLS, on FrontEnd  (%):  35.967% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.257%  ║  ║ IPC DEGRADATION      (%):  2.391%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.834% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total            (%):  0.05%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.054% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.054% ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.045% ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.35%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.71%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.35%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.71%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.02% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.02% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.05%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.549506 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.565649 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807334 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               16027728 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.561295 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1068.96% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.45%  ║  ║ STALLS, on the total (%):  92.54%  ║  ║ IPC DEGRADATION (%):  0.141% ║  ║ PERFORMANCE IPC (%):  9.355% ║  
║ IPC DEGRADATION      (%):  6.743% ║  ║ IPC DEGRADATION      (%):  83.752% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.78%   ║  ║ STALLS, on the total (%):  2.67%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.44%  ║  
║ STALLS, on FrontEnd  (%):  64.161% ║  ║ STALLS, on FrontEnd  (%):  35.839% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.326%  ║  ║ IPC DEGRADATION      (%):  2.416%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.662% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total            (%):  0.05%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.054% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.054% ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.045% ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.42%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.74%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.42%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.74%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.90% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.90% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.05%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.569778 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.561295 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806969 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15686447 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.551797 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1087.36% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.560512 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1070.45% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.548053 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1094.78% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56278 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1066.14% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.563595 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1064.59% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.564843 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1062.24% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.560028 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1071.38% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 3.4362828811714307e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1746072779.07% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 3.571716028382459e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1679864791.13% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 3.5134266257294695e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1707734539.28% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 3.5630172831570517e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1683966010.6% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 3.6265043043533375e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1654485834.42% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 3.569572774793466e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1680873420.59% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 3.5818571706486063e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1675108669.65% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 3.500073237922251e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1714249843.4% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.0 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.0 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.0 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.0 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.0530971049682948e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 569748029.09% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.0652249595285267e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 563261304.23% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.0654103477776738e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 563163293.14% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.0710658578168984e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 560189642.51% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.0787266349422854e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 556211351.94% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.0729201491822443e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 559221485.83% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.056489757990646e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 567918425.58% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.00023041605385242404% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.0029216503463175354% 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 0.006321813717919057% 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.565407 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               374.13612892187984% 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.2387684614329618e-05 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 48435201.47% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.001% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.001% ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.00017829449186069818 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.0005520312344032898 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 0.0014707777949102075 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.2387684614329618e-05 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               89.47608362389438 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.1052463766176412e-05 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 54286538.52% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.001% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.001% ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.00016136263265661174 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.0005746758026310507 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 0.0014817826171326098 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.1052463766176412e-05 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               90.17095606436105 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 9.94638912125695e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 60323399.04% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.001% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.001% ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.00011056205339685023 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.0006149583442463692 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 0.001462877085236313 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      9.94638912125695e-06 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               84.99217453695475 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.0920738150492616e-05 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 54941341.12% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.001% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.001% ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.000134956094951748 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.0006357503397024493 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 0.0015530205748312664 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.0920738150492616e-05 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               90.87899964465157 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.1568305524292668e-05 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 51865850.08% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.001% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.001% ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.79183677856306e-05 
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          9.679296531329506e-05 
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.0    
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          3.248951691036363e-05 
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          8.391077973305162e-06 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.000602391879463278 
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                1.7657346146936754e-07 
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                1.9730165042446724e-06 
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                7.492856451917511e-06 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 0.0007677107020407285 
			branch_efficiency                             Branch Efficiency                                 0.0007677107020407285 
			branch_efficiency                             Branch Efficiency                                 1.0635271393410277e-05 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.1568305524292668e-05 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               70.53795484939818 
			inst_issued                                   Instructions Issued                               0.0    
			inst_issued                                   Instructions Issued                               11.755570124998656 
			inst_issued                                   Instructions Issued                               0.0    
			inst_issued                                   Instructions Issued                               0.0    
			inst_issued                                   Instructions Issued                               11.755795064234354 
			inst_issued                                   Instructions Issued                               3.070838969609404e-05 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.1600650317196944e-05 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 51721238.34% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.001% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.001% ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.851565522880719e-05 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        0.00010000915397994278 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       3.3600491084100465e-05 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                8.70781957582457e-06 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.0005983395141928998 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.5384840239972739e-07 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   2.023106491556415e-06 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             7.892423043106015e-06 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 0.000769242011998637 
			warp_execution_efficiency                     Warp Execution Efficiency                         0.000769242011998637 
			issued_ipc                                    Issued IPC                                        1.0886681420728458e-05 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.1600650317196944e-05 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               70.67783298371285 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         11.779018308729128 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             11.779243696638645 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.076964201784488e-05 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.253182695741951e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 478780948.73% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          9.510784448525014e-07 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        5.367206587418265e-06 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       1.8126627674348787e-06 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                4.669966016641025e-07 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                6.416728566767903e-05 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.3017326875654425e-08 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   1.016978662160502e-07 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             3.425184134156571e-07 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 7.322246367555615e-05 
			warp_execution_efficiency                     Warp Execution Efficiency                         7.322246367555615e-05 
			issued_ipc                                    Issued IPC                                        1.0344437655546885e-06 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.253182695741951e-06 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               6.727709414212154 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1.1212189750319534 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1.1212403722630053 
			gst_transactions_per_request                  Global Store Transactions Per Request             2.928894885899062e-06 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.264790242328589e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 474386961.51% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.159456039795389e-06 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        1.1655043225237135e-05 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       3.902069345776616e-06 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.0097526151238369e-06 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                5.556348108527188e-05 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.5048474144915604e-08 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   2.3776589148966653e-07 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             6.937346580806093e-07 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 7.524237072457801e-05 
			warp_execution_efficiency                     Warp Execution Efficiency                         7.524237072457801e-05 
			issued_ipc                                    Issued IPC                                        1.0333632196029852e-06 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.264790242328589e-06 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               6.913277750289232 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1.1521488017201007 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1.1521707724923524 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.0096910668645845e-06 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.1900639051606858e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 504174605.58% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          9.094719766109836e-07 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        5.145856000774791e-06 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       1.725878185232657e-06 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                4.433865044043564e-07 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                5.9439517087026325e-05 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.3619380681362483e-08 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   9.911882606991584e-08 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             3.1929881375194264e-07 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 6.80969034068124e-05 
			warp_execution_efficiency                     Warp Execution Efficiency                         6.80969034068124e-05 
			issued_ipc                                    Issued IPC                                        9.387238337648659e-07 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.1900639051606858e-06 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               6.256814532787145 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1.042733833416815 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1.042753657182029 
			gst_transactions_per_request                  Global Store Transactions Per Request             2.723872731427326e-06 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 6.057590937526792e-08 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 9904927655.04% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.2334899994822122e-07 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        1.2191353963919535e-06 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       4.244161519206104e-07 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.2148912348727474e-07 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                3.201158825861204e-06 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.061040379801526e-09 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   2.5464969115236622e-08 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             8.965791209322895e-08 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 5.30520189900763e-06 
			warp_execution_efficiency                     Warp Execution Efficiency                         5.30520189900763e-06 
			issued_ipc                                    Issued IPC                                        9.645652832680722e-08 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      6.057590937526792e-08 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               0.4874454519140744 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         0.08123590407855434 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             0.08123744258710505 
			gst_transactions_per_request                  Global Store Transactions Per Request             2.1220781070021026e-07 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 9.4339451972339e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 636001150.59% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.5711553484156593e-06 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        8.567038704515756e-06 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       2.8973559043864894e-06 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                7.725006605486656e-07 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                5.561303062534534e-05 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.4033868317151646e-08 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   1.7414754775374545e-07 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             5.670958606339915e-07 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 7.016934158575823e-05 
			warp_execution_efficiency                     Warp Execution Efficiency                         7.016934158575823e-05 
			issued_ipc                                    Issued IPC                                        1.3134833834533803e-06 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      9.4339451972339e-07 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               6.447161720302198 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1.074468043031923 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1.0744885197216039 
			gst_transactions_per_request                  Global Store Transactions Per Request             2.8067701549632496e-06 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.3082266626314618e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 458636119.52% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.0599453761617742e-06 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        1.107527068633101e-05 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       3.8220046737657156e-06 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.1128013607970925e-06 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                6.258950510945197e-05 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.6342877127861175e-08 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   2.2805742173879003e-07 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             8.104581339316608e-07 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 8.171438563930587e-05 
			warp_execution_efficiency                     Warp Execution Efficiency                         8.171438563930587e-05 
			issued_ipc                                    Issued IPC                                        1.2303986131731611e-06 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.3082266626314618e-06 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               7.507929638268244 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1.2512515301018712 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1.2512754501311218 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.268571339852953e-06 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 9.22166524542019e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 650641705.19% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.3460159757050215e-06 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        7.3942770870804555e-06 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       2.496839302365206e-06 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                6.574196860190689e-07 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                5.524087518419612e-05 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.3555045072558122e-08 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   1.4774999129088353e-07 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             4.784930910613018e-07 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 6.777522536279061e-05 
			warp_execution_efficiency                     Warp Execution Efficiency                         6.777522536279061e-05 
			issued_ipc                                    Issued IPC                                        1.2738700616090352e-06 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      9.22166524542019e-07 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               6.2271854019755395 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1.0378081383677311 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1.037827928733537 
			gst_transactions_per_request                  Global Store Transactions Per Request             2.7110056257503564e-06 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 8.53470823223749e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 703011730.07% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.6964553379083402e-06 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        9.066672061786518e-06 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       3.128394875747975e-06 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                8.912883805932618e-07 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                4.5833684767977266e-05 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.2303060468311896e-08 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   1.8659641710273042e-07 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             7.005909433344273e-07 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 6.151530234155947e-05 
			warp_execution_efficiency                     Warp Execution Efficiency                         6.151530234155947e-05 
			issued_ipc                                    Issued IPC                                        8.748419227605661e-07 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      8.53470823223749e-07 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               5.652120849408763 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         0.9419530671051295 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             0.9419709748931445 
			gst_transactions_per_request                  Global Store Transactions Per Request             2.460609017897262e-06 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.3457151095259676e-06 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 445859599.67% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.104604640747566e-06 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        1.1480667108275825e-05 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       3.8110584190105844e-06 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                9.608967710615626e-07 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                9.127478407797303e-05 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          2.2119492360252627e-08 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   2.2835122995437268e-07 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             7.260398080600568e-07 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 0.00011059746180126312 
			warp_execution_efficiency                     Warp Execution Efficiency                         0.00011059746180126312 
			issued_ipc                                    Issued IPC                                        1.324181003025296e-06 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.3457151095259676e-06 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               10.161760823490486 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1.6935236338318416 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1.6935562926117382 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.423892942177436e-06 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 8.545373676416719e-07 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 702134304.15% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                     ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                     ║
║ STALLS, on the total (%):  0.0%   ║  ║ STALLS, on the total (%):  0.0%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  0.0% ║  
║ IPC DEGRADATION      (%):  0.0%   ║  ║ IPC DEGRADATION      (%):  0.0%   ║  ║                              ║  ║                            ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.237434102536576e-06 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        6.813399581129922e-06 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       2.313018380403633e-06 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                6.241803364892e-07 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                4.987569660301119e-05 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          1.229239174705208e-08 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   1.3726504117541488e-07 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             4.5481849464092694e-07 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 6.14619587352604e-05 
			warp_execution_efficiency                     Warp Execution Efficiency                         6.14619587352604e-05 
			issued_ipc                                    Issued IPC                                        1.2101714215003765e-06 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      8.545373676416719e-07 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               5.6471639676671845 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         0.9411362431336747 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             0.9411541353927733 
			gst_transactions_per_request                  Global Store Transactions Per Request             2.4584752763124793e-06 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.2503079210374288 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 479.88% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  17.629% ║  ║ STALLS, on the total (%):  82.361% ║  ║ IPC DEGRADATION (%):  7.464% ║  ║ PERFORMANCE IPC (%):  20.838% ║  
║ IPC DEGRADATION      (%):  12.639% ║  ║ IPC DEGRADATION      (%):  59.051% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.0212748887684913 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        11.018528325760563 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       3.652549777536983 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.9364616457543224 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                81.42522919560326 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02   
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.21827108100472298 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.6976850855716454 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0  
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0  
			issued_ipc                                    Issued IPC                                        1.6981367175215492 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.2503079210374288 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               9188014.72086737 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.5611719908 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.2674039093056355 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 473.41% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  16.271% ║  ║ STALLS, on the total (%):  83.734% ║  ║ IPC DEGRADATION (%):  5.56%  ║  ║ PERFORMANCE IPC (%):  21.123% ║  
║ IPC DEGRADATION      (%):  11.929% ║  ║ IPC DEGRADATION      (%):  61.391% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.8580777611113648 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        10.196598658693077 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       3.365336879928888 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.8505155776883806 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                82.90625088431645 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02   
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.2002668439964444 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.6072772291220314 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0  
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0  
			issued_ipc                                    Issued IPC                                        1.6009783919435272 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.2674039093056355 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               9187981.782902742 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.5676165144 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.2592651482053578 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 476.47% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  17.323% ║  ║ STALLS, on the total (%):  82.681% ║  ║ IPC DEGRADATION (%):  8.978% ║  ║ PERFORMANCE IPC (%):  20.988% ║  
║ IPC DEGRADATION      (%):  12.132% ║  ║ IPC DEGRADATION      (%):  57.905% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.979  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        10.857 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       3.583  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.904  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                81.786 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.024  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.214  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.657  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0  
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0  
			issued_ipc                                    Issued IPC                                        1.798  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.259  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               9188001.396 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.559 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.2432947500547822 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 482.59% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  21.858% ║  ║ STALLS, on the total (%):  78.148% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  20.722% ║  
║ IPC DEGRADATION      (%):  17.329% ║  ║ IPC DEGRADATION      (%):  61.954% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.501  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        13.705 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       4.521  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.131  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                76.822 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02   
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.28   
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             1.026  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0  
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0  
			issued_ipc                                    Issued IPC                                        1.066  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.243  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               9188071.743 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.556 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.581439856822872 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 379.4% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  19.374% ║  ║ STALLS, on the total (%):  80.622% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  26.357% ║  
║ IPC DEGRADATION      (%):  14.268% ║  ║ IPC DEGRADATION      (%):  59.372% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.192  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        12.055 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0    
			stall_other                                   Issue Stall Reasons (Other)                       4.051  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.077  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                79.438 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02   
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.24   
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.923  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0  
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0  
			issued_ipc                                    Issued IPC                                        1.441  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.581  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               9187998.165 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0    
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.583 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.5197553975199085 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 394.8% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  19.801% ║  ║ STALLS, on the total (%):  80.209% ║  ║ IPC DEGRADATION (%):  0.321% ║  ║ PERFORMANCE IPC (%):  25.329% ║  
║ IPC DEGRADATION      (%):  14.722% ║  ║ IPC DEGRADATION      (%):  59.635% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.241% 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        12.301% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       4.152% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.107% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                78.987% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.246% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.957% 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.539  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.52   
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               9187956.743 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.602 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.4176319596084312 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 423.24% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  16.969% ║  ║ STALLS, on the total (%):  83.039% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  23.627% ║  
║ IPC DEGRADATION      (%):  12.959% ║  ║ IPC DEGRADATION      (%):  63.419% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.923% 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        10.591% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.529% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.925% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                82.027% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.212% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.78%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.367  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.418  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               9188016.331 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.583 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.5854316383035967 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 378.45% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.525567716898189 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 393.3% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.3794971453924987 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 434.94% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.5081320769996058 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 397.84% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  19.407% ║  ║ STALLS, on the total (%):  80.593% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  25.136% ║  
║ IPC DEGRADATION      (%):  14.529% ║  ║ IPC DEGRADATION      (%):  60.336% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.2%   
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        12.098% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       4.047% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.061% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                79.411% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.245% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.917% 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.434  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.508  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               18376014.0 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.605 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.444608262577007 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 415.34% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  18.262% ║  ║ STALLS, on the total (%):  81.743% ║  ║ IPC DEGRADATION (%):  0.103% ║  ║ PERFORMANCE IPC (%):  24.077% ║  
║ IPC DEGRADATION      (%):  13.846% ║  ║ IPC DEGRADATION      (%):  61.978% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.077% 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        11.374% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.813% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.998% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                80.649% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.03%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.224% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.839% 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.451  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.445  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               18376065.0 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.581 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.4173947561157108 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 423.31% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  17.247% ║  ║ STALLS, on the total (%):  82.747% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  23.623% ║  
║ IPC DEGRADATION      (%):  13.173% ║  ║ IPC DEGRADATION      (%):  63.199% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          4.22%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        10.766% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.584% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.941% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                81.724% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.212% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.791% 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.36   
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.417  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               18376032.0 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.581 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.5111507440974898 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 397.05% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  19.619% ║  ║ STALLS, on the total (%):  80.383% ║  ║ IPC DEGRADATION (%):  0.52%  ║  ║ PERFORMANCE IPC (%):  25.186% ║  
║ IPC DEGRADATION      (%):  14.576% ║  ║ IPC DEGRADATION      (%):  59.72%  ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          4.91%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        12.301% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       4.051% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.029% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                79.154% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.024% 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.245% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.96%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.542  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.511  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               18376046.0 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.605 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.2348680369329186 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 485.88% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  15.594% ║  ║ STALLS, on the total (%):  84.404% ║  ║ IPC DEGRADATION (%):  6.408% ║  ║ PERFORMANCE IPC (%):  20.581% ║  
║ IPC DEGRADATION      (%):  11.386% ║  ║ IPC DEGRADATION      (%):  61.624% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          1.76%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        9.825% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.201% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.809% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                83.645% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.192% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.547% 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.619  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.235  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               18376099.0 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.599 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  2                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.5103424068653801 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 397.26% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  18.577% ║  ║ STALLS, on the total (%):  81.429% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  25.172% ║  
║ IPC DEGRADATION      (%):  13.901% ║  ║ IPC DEGRADATION      (%):  60.931% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY              ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------              ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  12.629% ║  ║ STALLS, on the total (%):  5.948% ║  ║ STALLS, on the total (%):  0.233% ║  ║ STALLS, on the total (%):  81.195% ║  
║ STALLS, on FrontEnd  (%):  67.98%  ║  ║ STALLS, on FrontEnd  (%):  32.02% ║  ║ STALLS, on BackEnd   (%):  0.286% ║  ║ STALLS, on BackEnd   (%):  99.714% ║  
║                                    ║  ║                                   ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  9.45%   ║  ║ IPC DEGRADATION      (%):  4.451% ║  ║ IPC DEGRADATION      (%):  0.174% ║  ║ IPC DEGRADATION      (%):  60.757% ║  
╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.129% 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        11.672% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.82%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.957% 
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        11.672% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.957% 
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.129% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.82%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                80.337% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.03%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.233% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.828% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.233% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                80.337% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.03%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.828% 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.286  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.51   
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               18376012.0 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.605 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔══════════════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.3255140430295071 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚══════════════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 452.65% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  18.989% ║  ║ STALLS, on the total (%):  81.006% ║  ║ IPC DEGRADATION (%):  5.585% ║  ║ PERFORMANCE IPC (%):  22.092% ║  
║ IPC DEGRADATION      (%):  13.733% ║  ║ IPC DEGRADATION      (%):  58.586% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY              ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------              ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  12.892% ║  ║ STALLS, on the total (%):  6.097% ║  ║ STALLS, on the total (%):  0.234% ║  ║ STALLS, on the total (%):  80.772% ║  
║ STALLS, on FrontEnd  (%):  67.89%  ║  ║ STALLS, on FrontEnd  (%):  32.11% ║  ║ STALLS, on BackEnd   (%):  0.289% ║  ║ STALLS, on BackEnd   (%):  99.711% ║  
║                                    ║  ║                                   ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  9.324%  ║  ║ IPC DEGRADATION      (%):  4.41%  ║  ║ IPC DEGRADATION      (%):  0.169% ║  ║ IPC DEGRADATION      (%):  58.417% ║  
╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total            (%):  0.02%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.025% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.025% ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.014% ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.188% 
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        11.91% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.909% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.982% 
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        11.91% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.982% 
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.188% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.909% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                79.89% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.234% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.862% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.234% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                79.89% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.02%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.862% 
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.02%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.661  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.326  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               18375977.0 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.522 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═════════════════════════════════════════════════╗
					║ IPC OBTAINED: 1.428 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 420.311% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔═══════════════════════════════╗
║ FRONT-END                          ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                        ║
║ ---------                          ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                        ║
║ STALLS, on the total (%):  18.935% ║  ║ STALLS, on the total (%):  81.062% ║  ║ IPC DEGRADATION (%):  1.283% ║  ║ PERFORMANCE IPC (%):  23.792% ║  
║ IPC DEGRADATION      (%):  14.187% ║  ║ IPC DEGRADATION      (%):  60.736% ║  ║                              ║  ║                               ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚═══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  12.875% ║  ║ STALLS, on the total (%):  6.06%   ║  ║ STALLS, on the total (%):  0.235% ║  ║ STALLS, on the total (%):  80.827% ║  
║ STALLS, on FrontEnd  (%):  67.996% ║  ║ STALLS, on FrontEnd  (%):  32.004% ║  ║ STALLS, on BackEnd   (%):  0.29%  ║  ║ STALLS, on BackEnd   (%):  99.71%  ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  9.647%  ║  ║ IPC DEGRADATION      (%):  4.54%   ║  ║ IPC DEGRADATION      (%):  0.176% ║  ║ IPC DEGRADATION      (%):  60.56%  ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total            (%):  0.016% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.02%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.02%  ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.012% ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.17%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        11.833% 
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.89%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.042% 
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        11.833% 
			stall_not_selected                            Issue Stall Reasons (Not Selected)                1.042% 
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          2.17%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.0%   
			stall_other                                   Issue Stall Reasons (Other)                       3.89%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                80.069% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.016% 
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.235% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.742% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.235% 
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                80.069% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.016% 
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.742% 
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.016% 
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.0% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.0% 
			issued_ipc                                    Issued IPC                                        1.505  
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      1.428  
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               18376062.0 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.0%   
			gst_transactions                              Global Store Transactions                         1531250.0 
			shared_store_transactions                     Shared Store Transactions                         0.0    
			local_store_transactions                      Local Store Transactions                          0.0    
			l2_write_transactions                         L2 Write Transactions                             1531279.626 
			gst_transactions_per_request                  Global Store Transactions Per Request             4.0    
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!