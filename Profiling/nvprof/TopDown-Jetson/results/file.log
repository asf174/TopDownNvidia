	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.563103 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1065.52% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.37%  ║  ║ STALLS, on the total (%):  92.62%  ║  ║ IPC DEGRADATION (%):  0.1%   ║  ║ PERFORMANCE IPC (%):  9.385% ║  
║ IPC DEGRADATION      (%):  6.671% ║  ║ IPC DEGRADATION      (%):  83.835% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.90%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.73%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.99% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.569104 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563103 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806905 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15636072 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.567697 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1056.9% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.24%  ║  ║ STALLS, on the total (%):  92.75%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.462% ║  
║ IPC DEGRADATION      (%):  6.555% ║  ║ IPC DEGRADATION      (%):  83.974% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.30%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.65%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.12% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.557352 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.567697 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807240 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15801939 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.567232 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1057.77% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.47%  ║  ║ STALLS, on the total (%):  92.55% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.454% ║  
║ IPC DEGRADATION      (%):  6.764% ║  ║ IPC DEGRADATION      (%):  83.8%  ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.95%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.76%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.37%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.89% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567226 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.567232 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807307 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15526987 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.569167 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1054.17% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.46%  ║  ║ STALLS, on the total (%):  92.54%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.486% ║  
║ IPC DEGRADATION      (%):  6.752% ║  ║ IPC DEGRADATION      (%):  83.762% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.40%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.76%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.89% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.566016 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.569167 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807169 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15559932 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲ ̲̲̲T̲̲̲o̲̲̲p̲̲̲D̲̲̲o̲̲̲w̲̲̲n̲̲̲ ̲̲̲M̲̲̲e̲̲̲t̲̲̲h̲̲̲o̲̲̲l̲̲̲o̲̲̲d̲̲̲g̲̲̲y̲̲̲ ̲̲̲o̲̲̲v̲̲̲e̲̲̲r̲̲̲ ̲̲̲N̲̲̲V̲̲̲I̲̲̲D̲̲̲I̲̲̲A̲̲̲'̲̲̲s̲̲̲ ̲̲̲G̲̲̲P̲̲̲U̲̲̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.563687 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1064.42% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲ ̲̲̲D̲̲̲E̲̲̲S̲̲̲C̲̲̲R̲̲̲I̲̲̲P̲̲̲T̲̲̲I̲̲̲O̲̲̲N̲̲̲ ̲̲̲O̲̲̲F̲̲̲ ̲̲̲M̲̲̲E̲̲̲A̲̲̲S̲̲̲U̲̲̲R̲̲̲E̲̲̲ ̲̲̲P̲̲̲A̲̲̲R̲̲̲T̲̲̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.4%   ║  ║ STALLS, on the total (%):  92.59%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.395% ║  
║ IPC DEGRADATION      (%):  6.705% ║  ║ IPC DEGRADATION      (%):  83.891% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲	̲̲̲ ̲̲̲
̲̲̲
̲̲̲L̲̲̲i̲̲̲s̲̲̲t̲̲̲ ̲̲̲o̲̲̲f̲̲̲ ̲̲̲c̲̲̲o̲̲̲u̲̲̲n̲̲̲t̲̲̲e̲̲̲r̲̲̲s̲̲̲/̲̲̲m̲̲̲e̲̲̲t̲̲̲r̲̲̲i̲̲̲c̲̲̲s̲̲̲ ̲̲̲m̲̲̲e̲̲̲a̲̲̲s̲̲̲u̲̲̲r̲̲̲e̲̲̲d̲̲̲ ̲̲̲a̲̲̲c̲̲̲c̲̲̲o̲̲̲r̲̲̲d̲̲̲i̲̲̲n̲̲̲g̲̲̲ ̲̲̲t̲̲̲o̲̲̲ ̲̲̲t̲̲̲h̲̲̲e̲̲̲ ̲̲̲p̲̲̲a̲̲̲r̲̲̲t̲̲̲.̲̲̲
̲̲̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.72%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.94% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.563628 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563687 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807309 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531297 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15619896 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲T̲̲̲o̲̲̲p̲̲̲D̲̲̲o̲̲̲w̲̲̲n̲̲̲ ̲̲̲M̲̲̲e̲̲̲t̲̲̲h̲̲̲o̲̲̲l̲̲̲o̲̲̲d̲̲̲g̲̲̲y̲̲̲ ̲̲̲o̲̲̲v̲̲̲e̲̲̲r̲̲̲ ̲̲̲N̲̲̲V̲̲̲I̲̲̲D̲̲̲I̲̲̲A̲̲̲'̲̲̲s̲̲̲ ̲̲̲G̲̲̲P̲̲̲U̲̲̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.555139 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1080.81% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲D̲̲̲E̲̲̲S̲̲̲C̲̲̲R̲̲̲I̲̲̲P̲̲̲T̲̲̲I̲̲̲O̲̲̲N̲̲̲ ̲̲̲O̲̲̲F̲̲̲ ̲̲̲M̲̲̲E̲̲̲A̲̲̲S̲̲̲U̲̲̲R̲̲̲E̲̲̲ ̲̲̲P̲̲̲A̲̲̲R̲̲̲T̲̲̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.34%  ║  ║ STALLS, on the total (%):  92.67%  ║  ║ IPC DEGRADATION (%):  0.21%  ║  ║ PERFORMANCE IPC (%):  9.252% ║  
║ IPC DEGRADATION      (%):  6.645% ║  ║ IPC DEGRADATION      (%):  83.901% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲
̲̲̲
̲̲̲L̲̲̲i̲̲̲s̲̲̲t̲̲̲ ̲̲̲o̲̲̲f̲̲̲ ̲̲̲c̲̲̲o̲̲̲u̲̲̲n̲̲̲t̲̲̲e̲̲̲r̲̲̲s̲̲̲/̲̲̲m̲̲̲e̲̲̲t̲̲̲r̲̲̲i̲̲̲c̲̲̲s̲̲̲ ̲̲̲m̲̲̲e̲̲̲a̲̲̲s̲̲̲u̲̲̲r̲̲̲e̲̲̲d̲̲̲ ̲̲̲a̲̲̲c̲̲̲c̲̲̲o̲̲̲r̲̲̲d̲̲̲i̲̲̲n̲̲̲g̲̲̲ ̲̲̲t̲̲̲o̲̲̲ ̲̲̲t̲̲̲h̲̲̲e̲̲̲ ̲̲̲p̲̲̲a̲̲̲r̲̲̲t̲̲̲.̲̲̲
̲̲̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.96%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.02% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567763 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.555139 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807287 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15512250 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.53966 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1111.81% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.05%  ║  ║ STALLS, on the total (%):  92.95% ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  8.994% ║  
║ IPC DEGRADATION      (%):  6.416% ║  ║ IPC DEGRADATION      (%):  84.59% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.90%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.19%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.62%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.33% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.47%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.529155 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.539660 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807419 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               16644297 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.533902 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1123.8% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  6.98%  ║  ║ STALLS, on the total (%):  93.02%  ║  ║ IPC DEGRADATION (%):  0.077% ║  ║ PERFORMANCE IPC (%):  8.898% ║  
║ IPC DEGRADATION      (%):  6.354% ║  ║ IPC DEGRADATION      (%):  84.671% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.89%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.11%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.64%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.41% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.46%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.538509 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.533902 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807195 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               16491271 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly! ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.563491 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1064.79% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
 ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲
̲ ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.16%  ║  ║ STALLS, on the total (%):  92.83%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.392% ║  
║ IPC DEGRADATION      (%):  6.488% ║  ║ IPC DEGRADATION      (%):  84.112% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.25%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.65%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.20% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.06%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.563161 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563491 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807159 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15625325 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly! ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.566437 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1059.25% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
 ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.32%  ║  ║ STALLS, on the total (%):  92.69%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.441% ║  
║ IPC DEGRADATION      (%):  6.629% ║  ║ IPC DEGRADATION      (%):  83.939% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲
̲
̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.34%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.03% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.562907 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.566437 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807083 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15544046 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly! ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.564739 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1062.44% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
 ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.35%  ║  ║ STALLS, on the total (%):  92.65%  ║  ║ IPC DEGRADATION (%):  0.08%  ║  ║ PERFORMANCE IPC (%):  9.412% ║  
║ IPC DEGRADATION      (%):  6.652% ║  ║ IPC DEGRADATION      (%):  83.855% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲.̲
̲
 ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.00% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.569542 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.564739 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807230 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15463698 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly! ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.564635 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1062.63% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
 ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.29%  ║  ║ STALLS, on the total (%):  92.7%   ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.411% ║  
║ IPC DEGRADATION      (%):  6.604% ║  ║ IPC DEGRADATION      (%):  83.976% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲. ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.33%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.564135 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.564635 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807203 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15611864 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56392 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1063.98% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.41%  ║  ║ STALLS, on the total (%):  92.59%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.399% ║  
║ IPC DEGRADATION      (%):  6.714% ║  ║ IPC DEGRADATION      (%):  83.888% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲. ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.73%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.95% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.563403 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563920 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807304 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15613439 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.568277 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1055.82% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.29%  ║  ║ STALLS, on the total (%):  92.71%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.471% ║  
║ IPC DEGRADATION      (%):  6.6%   ║  ║ IPC DEGRADATION      (%):  83.929% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t̲. ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.34%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.07% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.563114 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.568277 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807124 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15640033 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.565692 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1060.65% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.29%  ║  ║ STALLS, on the total (%):  92.73%  ║  ║ IPC DEGRADATION (%):  0.016% ║  ║ PERFORMANCE IPC (%):  9.428% ║  
║ IPC DEGRADATION      (%):  6.602% ║  ║ IPC DEGRADATION      (%):  83.972% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.35%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.07% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.566665 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.565692 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807311 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15564526 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.567755 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1056.79% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.35%  ║  ║ STALLS, on the total (%):  92.65%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.463% ║  
║ IPC DEGRADATION      (%):  6.655% ║  ║ IPC DEGRADATION      (%):  83.883% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.40%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.99% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.566052 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.567755 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807299 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15507961 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56355 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1064.68% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.27%  ║  ║ STALLS, on the total (%):  92.72%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.393% ║  
║ IPC DEGRADATION      (%):  6.587% ║  ║ IPC DEGRADATION      (%):  84.011% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.66%   ║  ║ STALLS, on the total (%):  2.61%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.63%  ║  
║ STALLS, on FrontEnd  (%):  64.099% ║  ║ STALLS, on FrontEnd  (%):  35.901% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.222%  ║  ║ IPC DEGRADATION      (%):  2.365%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.93%  ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total (%):  0.07%             ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.076% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound  (%):  0.075%         ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION      (%):  0.063%            ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t
- FRONT-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.31%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------

- FRONT_END.BAND_WIDTH RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.31%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------

- FRONT_END.DEPENDENCY RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			-------------------------------------------------------------------------------------------------------

- BACK-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.08% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------

- BACK_END.CORE_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			-------------------------------------------------------------------------------------------------------

- BACK_END.MEMORY_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.08% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------

- MEMORY_BOUND.CONSTANT_MEMORY_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			-------------------------------------------------------------------------------------------------------

- DIVERGENCE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.558307 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------

- RETIRE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.563550 
			-------------------------------------------------------------------------------------------------------

- EXTRA_MEASURE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807174 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15623674 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.552436 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1086.1% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.39%  ║  ║ STALLS, on the total (%):  92.62%  ║  ║ IPC DEGRADATION (%):  0.246% ║  ║ PERFORMANCE IPC (%):  9.207% ║  
║ IPC DEGRADATION      (%):  6.691% ║  ║ IPC DEGRADATION      (%):  83.865% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.74%   ║  ║ STALLS, on the total (%):  2.65%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.52%  ║  
║ STALLS, on FrontEnd  (%):  64.141% ║  ║ STALLS, on FrontEnd  (%):  35.859% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.292%  ║  ║ IPC DEGRADATION      (%):  2.399%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.774% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total (%):  0.07%             ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.076% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound  (%):  0.076%         ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION      (%):  0.063%            ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t
- FRONT-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.96%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------

- FRONT_END.BAND_WIDTH RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------

- FRONT_END.DEPENDENCY RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.96%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			-------------------------------------------------------------------------------------------------------

- BACK-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.96% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------

- BACK_END.CORE_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------

- BACK_END.MEMORY_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.96% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------

- MEMORY_BOUND.CONSTANT_MEMORY_BOUND RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			-------------------------------------------------------------------------------------------------------

- DIVERGENCE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567184 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------

- RETIRE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.552436 
			-------------------------------------------------------------------------------------------------------

- EXTRA_MEASURE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807114 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15938002 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  2                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56827 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1055.84% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.37%  ║  ║ STALLS, on the total (%):  92.63%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.471% ║  
║ IPC DEGRADATION      (%):  6.672% ║  ║ IPC DEGRADATION      (%):  83.857% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.74%   ║  ║ STALLS, on the total (%):  2.63%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.53%  ║  
║ STALLS, on FrontEnd  (%):  64.315% ║  ║ STALLS, on FrontEnd  (%):  35.685% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.291%  ║  ║ IPC DEGRADATION      (%):  2.381%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.766% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.94%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.99% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.99% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567545 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.568270 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807123 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531279 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15517923 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.565923 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1060.21% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.37%  ║  ║ STALLS, on the total (%):  92.62%  ║  ║ IPC DEGRADATION (%):  0.051% ║  ║ PERFORMANCE IPC (%):  9.432% ║  
║ IPC DEGRADATION      (%):  6.671% ║  ║ IPC DEGRADATION      (%):  83.837% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲tAnalysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.567875 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1056.57% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S̲:
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.33%  ║  ║ STALLS, on the total (%):  92.67%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.465% ║  
║ IPC DEGRADATION      (%):  6.636% ║  ║ IPC DEGRADATION      (%):  83.899% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲tAnalysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.561346 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1068.86% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.4%   ║  ║ STALLS, on the total (%):  92.59%  ║  ║ IPC DEGRADATION (%):  0.039% ║  ║ PERFORMANCE IPC (%):  9.356% ║  
║ IPC DEGRADATION      (%):  6.705% ║  ║ IPC DEGRADATION      (%):  83.891% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲tAnalysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.564343 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1063.18% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                          ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                          ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.32%  ║  ║ STALLS, on the total (%):  92.68% ║  ║ IPC DEGRADATION (%):  0.024% ║  ║ PERFORMANCE IPC (%):  9.406% ║  
║ IPC DEGRADATION      (%):  6.63%  ║  ║ IPC DEGRADATION      (%):  83.94% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲tAnalysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56704 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1058.13% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.34%  ║  ║ STALLS, on the total (%):  92.68%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.451% ║  
║ IPC DEGRADATION      (%):  6.646% ║  ║ IPC DEGRADATION      (%):  83.921% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.36%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.69%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.05% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.564077 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.567040 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806926 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.559167 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1073.02% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.39%  ║  ║ STALLS, on the total (%):  92.62%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.319% ║  
║ IPC DEGRADATION      (%):  6.701% ║  ║ IPC DEGRADATION      (%):  83.988% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
 ̲B̲A̲C̲K̲-̲E̲N̲D
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15877165 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.554285 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1082.48% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.29%  ║  ║ STALLS, on the total (%):  92.72%  ║  ║ IPC DEGRADATION (%):  0.298% ║  ║ PERFORMANCE IPC (%):  9.238% ║  
║ IPC DEGRADATION      (%):  6.595% ║  ║ IPC DEGRADATION      (%):  83.878% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.91%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.08% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.572161 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.554285 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806916 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15884823 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.555384 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1080.33% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.02%  ║  ║ STALLS, on the total (%):  92.97%  ║  ║ IPC DEGRADATION (%):  0.024% ║  ║ PERFORMANCE IPC (%):  9.256% ║  
║ IPC DEGRADATION      (%):  6.368% ║  ║ IPC DEGRADATION      (%):  84.342% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.87%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.22%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.60%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.33%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.36% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.47%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.556854 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.555384 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806763 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15853398 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.569851 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1052.91% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.31%  ║  ║ STALLS, on the total (%):  92.68%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.498% ║  
║ IPC DEGRADATION      (%):  6.616% ║  ║ IPC DEGRADATION      (%):  83.878% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲B̲A̲C̲K̲-̲E̲N̲D
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15450937 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.565961 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1060.14% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.36%  ║  ║ STALLS, on the total (%):  92.65%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.433% ║  
║ IPC DEGRADATION      (%):  6.666% ║  ║ IPC DEGRADATION      (%):  83.911% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15574875 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  2                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.554697 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1081.67% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.25%  ║  ║ STALLS, on the total (%):  92.75%  ║  ║ IPC DEGRADATION (%):  0.242% ║  ║ PERFORMANCE IPC (%):  9.245% ║  
║ IPC DEGRADATION      (%):  6.562% ║  ║ IPC DEGRADATION      (%):  83.951% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.68%   ║  ║ STALLS, on the total (%):  2.57%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.65%  ║  
║ STALLS, on FrontEnd  (%):  64.552% ║  ║ STALLS, on FrontEnd  (%):  35.448% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.236%  ║  ║ IPC DEGRADATION      (%):  2.326%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.861% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.12% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15472784 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  2                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.563253 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1065.24% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.31%  ║  ║ STALLS, on the total (%):  92.68%  ║  ║ IPC DEGRADATION (%):  0.089% ║  ║ PERFORMANCE IPC (%):  9.388% ║  
║ IPC DEGRADATION      (%):  6.617% ║  ║ IPC DEGRADATION      (%):  83.897% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.7%    ║  ║ STALLS, on the total (%):  2.61%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.59%  ║  
║ STALLS, on FrontEnd  (%):  64.295% ║  ║ STALLS, on FrontEnd  (%):  35.705% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.255%  ║  ║ IPC DEGRADATION      (%):  2.363%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.816% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15631913 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  2                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.554274 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1082.5% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.3%   ║  ║ STALLS, on the total (%):  92.7%   ║  ║ IPC DEGRADATION (%):  0.215% ║  ║ PERFORMANCE IPC (%):  9.238% ║  
║ IPC DEGRADATION      (%):  6.61%  ║  ║ IPC DEGRADATION      (%):  83.938% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.71%   ║  ║ STALLS, on the total (%):  2.59%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.61%  ║  
║ STALLS, on FrontEnd  (%):  64.521% ║  ║ STALLS, on FrontEnd  (%):  35.479% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.265%  ║  ║ IPC DEGRADATION      (%):  2.345%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.856% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.36%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.36%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.67%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.05% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.05% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.07%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567150 
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.554274 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807256 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔═══════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.56014 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚═══════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1071.16% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.34%  ║  ║ STALLS, on the total (%):  92.67%  ║  ║ IPC DEGRADATION (%):  0.12%  ║  ║ PERFORMANCE IPC (%):  9.336% ║  
║ IPC DEGRADATION      (%):  6.646% ║  ║ IPC DEGRADATION      (%):  83.907% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.72%   ║  ║ STALLS, on the total (%):  2.62%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.57%  ║  
║ STALLS, on FrontEnd  (%):  64.305% ║  ║ STALLS, on FrontEnd  (%):  35.695% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.274%  ║  ║ IPC DEGRADATION      (%):  2.372%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.817% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total (%):  0.07%             ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.076% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound  (%):  0.076%         ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION      (%):  0.063%            ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲u̲n̲t̲e̲r̲s̲/̲m̲e̲t̲r̲i̲c̲s̲ ̲m̲e̲a̲s̲u̲r̲e̲d̲ ̲a̲c̲c̲o̲r̲d̲i̲n̲g̲ ̲t̲o̲ ̲t̲h̲e̲ ̲p̲a̲r̲t ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15718782 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.569804 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1052.99% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.34%  ║  ║ STALLS, on the total (%):  92.66%  ║  ║ IPC DEGRADATION (%):  0.018% ║  ║ PERFORMANCE IPC (%):  9.497% ║  
║ IPC DEGRADATION      (%):  6.642% ║  ║ IPC DEGRADATION      (%):  83.844% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.564483 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1062.92% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.24%  ║  ║ STALLS, on the total (%):  92.74%  ║  ║ IPC DEGRADATION (%):  0.047% ║  ║ PERFORMANCE IPC (%):  9.408% ║  
║ IPC DEGRADATION      (%):  6.555% ║  ║ IPC DEGRADATION      (%):  83.972% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.66%   ║  ║ STALLS, on the total (%):  2.58%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.65%  ║  
║ STALLS, on FrontEnd  (%):  64.365% ║  ║ STALLS, on FrontEnd  (%):  35.635% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.219%  ║  ║ IPC DEGRADATION      (%):  2.336%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.89%  ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total (%):  0.04%             ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound  (%):  0.043%         ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION      (%):  0.036%            ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.88%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.31%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.70%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.31%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.88%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.70%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.13% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.13% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.48%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567284 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.564483 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806969 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15597856 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.569619 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1053.34% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.32%  ║  ║ STALLS, on the total (%):  92.68%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.494% ║  
║ IPC DEGRADATION      (%):  6.625% ║  ║ IPC DEGRADATION      (%):  83.881% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.7%    ║  ║ STALLS, on the total (%):  2.62%   ║  ║ STALLS, on the total (%):  0.09%  ║  ║ STALLS, on the total (%):  92.59%  ║  
║ STALLS, on FrontEnd  (%):  64.208% ║  ║ STALLS, on FrontEnd  (%):  35.792% ║  ║ STALLS, on BackEnd   (%):  0.097% ║  ║ STALLS, on BackEnd   (%):  99.903% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.254%  ║  ║ IPC DEGRADATION      (%):  2.371%  ║  ║ IPC DEGRADATION      (%):  0.09%  ║  ║ IPC DEGRADATION      (%):  83.8%   ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total      (%):  0.04%        ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound         (%):  0.043%  ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION             (%):  0.036%     ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.35%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.70%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.35%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.92%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.70%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.09%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.568929 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.569619 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807293 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15480480 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.561482 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1068.6% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.41%  ║  ║ STALLS, on the total (%):  92.59%  ║  ║ IPC DEGRADATION (%):  0.111% ║  ║ PERFORMANCE IPC (%):  9.358% ║  
║ IPC DEGRADATION      (%):  6.708% ║  ║ IPC DEGRADATION      (%):  83.822% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.73%   ║  ║ STALLS, on the total (%):  2.68%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.49%  ║  
║ STALLS, on FrontEnd  (%):  63.833% ║  ║ STALLS, on FrontEnd  (%):  36.167% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.282%  ║  ║ IPC DEGRADATION      (%):  2.426%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.732% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔════════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND             ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------             ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total              (%):  0.04%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043%   ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.043%   ║  ║  ║  ║  ║  ║  ║  
║                                                ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.036%   ║  ║  ║  ║  ║  ║  ║  
╚════════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.75%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.37%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.75%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.96% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.96% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.568155 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.561482 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8806790 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15500695 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.571053 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1050.69% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.31%  ║  ║ STALLS, on the total (%):  92.69%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.518% ║  
║ IPC DEGRADATION      (%):  6.614% ║  ║ IPC DEGRADATION      (%):  83.868% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.72%   ║  ║ STALLS, on the total (%):  2.59%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.59%  ║  
║ STALLS, on FrontEnd  (%):  64.569% ║  ║ STALLS, on FrontEnd  (%):  35.431% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.271%  ║  ║ IPC DEGRADATION      (%):  2.343%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.778% ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔═══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND            ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------            ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total             (%):  0.04%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.043%  ║  ║  ║  ║  ║  ║  ║  
║                                               ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.036%  ║  ║  ║  ║  ║  ║  ║  
╚═══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.38%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.34%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.06% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.567529 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.571053 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807105 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15418415 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!	̲	̲	̲	̲	̲ ̲T̲o̲p̲D̲o̲w̲n̲ ̲M̲e̲t̲h̲o̲l̲o̲d̲g̲y̲ ̲o̲v̲e̲r̲ ̲N̲V̲I̲D̲I̲A̲'̲s̲ ̲G̲P̲U̲s


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Advisors:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  3                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/file.log                 ║
║ - Verbose:                          True                                ║
║ - Delete output's file content:     False                               ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.
The results have been obtained correctly. General results of IPC are the following:

					╔════════════════════════════════════════════════════╗
					║ IPC OBTAINED: 0.565562 | MAXIMUM POSSIBLE IPC: 6.0 ║
					╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1060.89% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:
	̲	̲	̲	̲	̲ ̲D̲E̲S̲C̲R̲I̲P̲T̲I̲O̲N̲ ̲O̲F̲ ̲M̲E̲A̲S̲U̲R̲E̲ ̲P̲A̲R̲T̲S ̲L̲E̲V̲E̲L̲ ̲O̲N̲E̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.



BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.



DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

╔═══════════════════════════════════╗  ╔════════════════════════════════════╗  ╔══════════════════════════════╗  ╔══════════════════════════════╗
║ FRONT-END                         ║  ║ BACK-END                           ║  ║ DIVERGENCE                   ║  ║ RETIRE                       ║
║ ---------                         ║  ║ --------                           ║  ║ ----------                   ║  ║ ------                       ║
║ STALLS, on the total (%):  7.39%  ║  ║ STALLS, on the total (%):  92.61%  ║  ║ IPC DEGRADATION (%):  0.0%   ║  ║ PERFORMANCE IPC (%):  9.426% ║  
║ IPC DEGRADATION      (%):  6.693% ║  ║ IPC DEGRADATION      (%):  83.881% ║  ║                              ║  ║                              ║  
╚═══════════════════════════════════╝  ╚════════════════════════════════════╝  ╚══════════════════════════════╝  ╚══════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲W̲O̲ ̲R̲E̲S̲U̲L̲T̲S
FRONT_END.BAND_WIDTH: BW description


FRONT_END.DEPENDENCY: D description


BACK_END.CORE_BOUND: In this part, the aspects related to CUDA cores that cause bottlenecks and thus performance losses are analyzed.
Some aspects such as the use and availability of the functional units are analyzed.


BACK_END.MEMORY_BOUND: It analyzes the parts of the GPU architecture where we have a loss of performance (IPC) due to
memory bounds. This part takes into account aspects such as data dependencies, failures or access
limits in caches

╔════════════════════════════════════╗  ╔════════════════════════════════════╗  ╔═══════════════════════════════════╗  ╔════════════════════════════════════╗
║ FRONT_END.BAND_WIDTH               ║  ║ FRONT_END.DEPENDENCY               ║  ║ BACK_END.CORE_BOUND               ║  ║ BACK_END.MEMORY_BOUND              ║
║ --------------------               ║  ║ --------------------               ║  ║ -------------------               ║  ║ ---------------------              ║
║ STALLS, on the total (%):  4.75%   ║  ║ STALLS, on the total (%):  2.64%   ║  ║ STALLS, on the total (%):  0.1%   ║  ║ STALLS, on the total (%):  92.51%  ║  
║ STALLS, on FrontEnd  (%):  64.276% ║  ║ STALLS, on FrontEnd  (%):  35.724% ║  ║ STALLS, on BackEnd   (%):  0.108% ║  ║ STALLS, on BackEnd   (%):  99.892% ║  
║                                    ║  ║                                    ║  ║                                   ║  ║                                    ║  
║ IPC DEGRADATION      (%):  4.302%  ║  ║ IPC DEGRADATION      (%):  2.391%  ║  ║ IPC DEGRADATION      (%):  0.1%   ║  ║ IPC DEGRADATION      (%):  83.79%  ║  
╚════════════════════════════════════╝  ╚════════════════════════════════════╝  ╚═══════════════════════════════════╝  ╚════════════════════════════════════╝   ̲L̲E̲V̲E̲L̲ ̲T̲H̲R̲E̲E̲ ̲R̲E̲S̲U̲L̲T̲S
MEMORY_BOUND.CONSTANT_MEMORY_BOUND: CMB description

╔══════════════════════════════════════════════╗  ╔══╗  ╔══╗  ╔══╗
║ MEMORY_BOUND.CONSTANT_MEMORY_BOUND           ║  ║  ║  ║  ║  ║  ║
║ ----------------------------------           ║  ║  ║  ║  ║  ║  ║
║ STALLS, on the total            (%):  0.04%  ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on BackEnd.MemoryBound  (%):  0.043% ║  ║  ║  ║  ║  ║  ║  
║ STALLS, on MemoryBound          (%):  0.043% ║  ║  ║  ║  ║  ║  ║  
║                                              ║  ║  ║  ║  ║  ║  ║  
║ IPC DEGRADATION                 (%):  0.036% ║  ║  ║  ║  ║  ║  ║  
╚══════════════════════════════════════════════╝  ╚══╝  ╚══╝  ╚══╝  	̲	̲	̲	̲	̲ ̲L̲i̲s̲t̲ ̲o̲f̲ ̲m̲e̲a̲s̲u̲r̲e̲m̲e̲n̲t̲s̲ ̲c̲o̲m̲p̲u̲t̲e̲d̲ ̲b̲y̲ ̲N̲V̲I̲D̲I̲A̲ ̲s̲c̲a̲n̲ ̲t̲o̲o̲l ̲F̲R̲O̲N̲T̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.90%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.74%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲B̲A̲N̲D̲_̲W̲I̲D̲T̲H
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.39%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.36%  
			-------------------------------------------------------------------------------------------------------
 ̲F̲R̲O̲N̲T̲_̲E̲N̲D̲.̲D̲E̲P̲E̲N̲D̲E̲N̲C̲Y
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.90%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.74%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲-̲E̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.98% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲C̲O̲R̲E̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			-------------------------------------------------------------------------------------------------------
 ̲B̲A̲C̲K̲_̲E̲N̲D̲.̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                91.98% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.04%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------
 ̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D̲.̲C̲O̲N̲S̲T̲A̲N̲T̲_̲M̲E̲M̲O̲R̲Y̲_̲B̲O̲U̲N̲D
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                0.04%  
			-------------------------------------------------------------------------------------------------------
 ̲D̲I̲V̲E̲R̲G̲E̲N̲C̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.562520 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------
 ̲R̲E̲T̲I̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.565562 
			-------------------------------------------------------------------------------------------------------
 ̲E̲X̲T̲R̲A̲_̲M̲E̲A̲S̲U̲R̲E
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807072 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			gst_transactions                              Global Store Transactions                         1531250 
			shared_store_transactions                     Shared Store Transactions                         0      
			local_store_transactions                      Local Store Transactions                          0      
			l2_write_transactions                         L2 Write Transactions                             1531263 
			gst_transactions_per_request                  Global Store Transactions Per Request             3.999995 
			-------------------------------------------------------------------------------------------------------
			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15568111 
			warps_launched                                -                                               382816 
			local_store                                   -                                               0      
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!