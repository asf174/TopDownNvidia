							╔═══════════════════════════════════════╗
							║ TopDown Metholodgy over NVIDIA's GPUs ║
							╚═══════════════════════════════════════╝


Welcome to the ../src/topdown.py program where you can check the bottlenecks of your
CUDA program running on NVIDIA GPUs. This analysis is carried out considering the architectural
aspects of your GPU, in its different parts. The objective is to detect the bottlenecks in your
program, which cause the IPC (Instructions per Cycle) to be drastically reduced.

Next, you can see general information about the program
╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ GENERAL INFORMATION                                                                                   ║
║ -------------------                                                                                   ║
║                                                                                                       ║
║ - Program Name:    topdown.py                                                                         ║
║ - Author:          Alvaro Saiz (UC)                                                                   ║
║ - Contact info:    asf174@alumnos.unican.es                                                           ║
║ - Company:         University Of Cantabria                                                            ║
║ - Place:           Santander, Cantabria, Kingdom of Spain                                             ║
║ - Teachers:        Pablo Abad (UC) <pablo.abad@unican.es>, Pablo Prieto (UC) <pablo.prieto@unican.es> ║
║ - Bugs Report:     asf174@alumnos.unican.es                                                           ║
║                                                                                                       ║
║ - Licence:         GNU GPL                                                                            ║
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝

In accordance with what has been entered, the execution will be carried out following the following terms:
╔═════════════════════════════════════════════════════════════════════════╗
║ EXECUTION FEATURES                                                      ║
║ ------------------                                                      ║
║                                                                         ║
║ - Execution Level:                  1                                   ║
║ - Analyzed program:                 ../../../../CUDA/bin/add_two_matrix ║
║ - Output File:                      ../results/output.log               ║
║ - Long-Description:                 True                                ║
║ - Delete output's file content:     True                                ║
╚═════════════════════════════════════════════════════════════════════════╝

Said that, according to the level entered by you, WE START THE ANALYSIS.

The results have been obtained correctly. General results of IPC are the following:

			╔════════════════════════════════════════════════════╗
			║ IPC OBTAINED: 0.552017 | MAXIMUM POSSIBLE IPC: 6.0 ║
			╚════════════════════════════════════════════════════╝


'IPC OBTAINED' is the IPC of the analyzed program (computed by scan tool) and 'MAXIMUM POSSIBLE IPC'
is the the maximum IPC your GPU can achieve. This is computed taking into account architectural concepts, such as the
number of warp planners per SM, as well as the number of Dispatch units of each SM.
    As you can see, the IPC obtanied it is 1086.92% smaller than you could get. This lower IPC is due to STALLS in the different 
parts of the architecture and DIVERGENCE problems. We analyze them based on the level of the TopDown:

FRONT-END: It analyzes the parts of the GPU architecture where the FrontEnd produces bottlenecks,
which leads to IPC losses. In this part, aspects related to the fetch of instructions
are analyzed, such as errors in the instruction cache or IPC losses due to thread synchronization.


			╔══════════════════════════════════════════╗
			║ FRONT-END RESULTS                        ║
			║ -----------------                        ║
			║                                          ║
			║ STALLS, on the total (%):          7.3%  ║
			║                                          ║
			║ IPC DEGRADATION (%):               7.29% ║
			║                                          ║
			╚══════════════════════════════════════════╝

BACK-END: It analyzes the parts of the GPU architecture where the BackEnd produces bottleneck,
which leads to IPC losses. In this part, We analyze aspects related to the 'execution' part of
the instructions, in which aspects such as limitations by functional units, memory limits, etc.


			╔════════════════════════════════════════════╗
			║ BACK-END RESULTS                           ║
			║ ----------------                           ║
			║                                            ║
			║ STALLS, on the total (%):          92.71%  ║
			║                                            ║
			║ IPC DEGRADATION (%):               92.587% ║
			║                                            ║
			╚════════════════════════════════════════════╝

DIVERGENCE: It analyzes the parts of the GPU architecture where divergence causes a loss of performance.
This problem is caused when warps are not used correctly. This is caused for example when, for example, there are
threads (of the same warp) that have to execute an instruction and others do not. In this case there are GPU cores
that are not being used. Another worst case occurs when some threads of a warp have to execute one instruction and
others another (if-else). In this case, twice as many cycles are necessary to execute, and in all cases part of the
cores will not be used.

			╔══════════════════════════════════════════╗
			║ DIVERGENCE RESULTS                       ║
			║ ------------------                       ║
			║                                          ║
			║ IPC DEGRADATION (%):              0.133% ║
			║                                          ║
			╚══════════════════════════════════════════╝


List of counters/metrics measured according to the part.

- FRONT-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_inst_fetch                              Issue Stall Reasons (Instructions Fetch)          0.93%  
			stall_exec_dependency                         Issue Stall Reasons (Execution Dependency)        4.36%  
			stall_sync                                    Issue Stall Reasons (Synchronization)             0.00%  
			stall_other                                   Issue Stall Reasons (Other)                       1.66%  
			stall_not_selected                            Issue Stall Reasons (Not Selected)                0.35%  
			-------------------------------------------------------------------------------------------------------

- BACK-END RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			stall_memory_dependency                       Issue Stall Reasons (Data Request)                92.07% 
			stall_constant_memory_dependency              Issue Stall Reasons (Immediate constant)          0.05%  
			stall_pipe_busy                               Issue Stall Reasons (Pipe Busy)                   0.10%  
			stall_memory_throttle                         Issue Stall Reasons (Memory Throttle)             0.49%  
			-------------------------------------------------------------------------------------------------------

- DIVERGENCE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			branch_efficiency                             Branch Efficiency                                 100.00% 
			warp_execution_efficiency                     Warp Execution Efficiency                         100.00% 
			issued_ipc                                    Issued IPC                                        0.559263 
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			branch                                        -                                               765629 
			divergent_branch                              -                                               0      
			-------------------------------------------------------------------------------------------------------

- RETIRE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			ipc                                           Executed IPC                                      0.552017 
			-------------------------------------------------------------------------------------------------------

- EXTRA-MEASURE RESULTS:
			-------------------------------------------------------------------------------------------------------
			Metric Name                                   Metric Description                                Value 
			-------------------------------------------------------------------------------------------------------
			inst_issued                                   Instructions Issued                               8807220 
			flop_dp_efficiency                            FLOP Efficiency(Peak Double)                      0.00%  
			-------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------
			Event Name                                    Event Description                               Value 
			-------------------------------------------------------------------------------------------------------
			active_cycles                                 -                                               15950106 
			-------------------------------------------------------------------------------------------------------

Analysis performed correctly!