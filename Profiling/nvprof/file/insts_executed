NUMBLOCKS: 47852 THREADS_PER_BLOCK: 256
==5742== Profiling application: ../../../CUDA/bin/add_two_matrix2
==5742== Profiling result:
==5742== Event result:
Invocations                                Event Name         Min         Max         Avg       Total
Device "NVIDIA Tegra X2 (0)"
    Kernel: addMatrix(int*, int*, int*, int)
          1                         elapsed_cycles_sm     5811910     5811910     5811910     5811910

==5742== Metric result:
Invocations                               Metric Name                        Metric Description         Min         Max         Avg
Device "NVIDIA Tegra X2 (0)"
    Kernel: addMatrix(int*, int*, int*, int)
          1                             inst_per_warp                     Instructions per warp   23.999882   23.999882   23.999882
          1                             inst_executed                     Instructions Executed     9187539     9187539     9187539
          1                                       ipc                              Executed IPC    2.512460    2.512460    2.512460


La matriz tiene tama√±o: 3500x3500 = 12250000
NUMBLOCKS: 47852 THREADS_PER_BLOCK: 256
__global__ void addMatrix(int* a, int* b, int* result, int size)
{
	int idx = blockDim.x*blockIdx.x + threadIdx.x;
	if (idx < size)
		result[idx] = a[idx] + b[idx];
}



//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23162084
// Cuda compilation tools, release 9.0, V9.0.252
// Based on LLVM 3.4svn
//

.version 6.0
.target sm_30
.address_size 64

	// .globl	_Z9addMatrixPiS_S_i

.visible .entry _Z9addMatrixPiS_S_i(
	.param .u64 _Z9addMatrixPiS_S_i_param_0,
	.param .u64 _Z9addMatrixPiS_S_i_param_1,
	.param .u64 _Z9addMatrixPiS_S_i_param_2,
	.param .u32 _Z9addMatrixPiS_S_i_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [_Z9addMatrixPiS_S_i_param_0];
	ld.param.u64 	%rd2, [_Z9addMatrixPiS_S_i_param_1];
	ld.param.u64 	%rd3, [_Z9addMatrixPiS_S_i_param_2];
	ld.param.u32 	%r2, [_Z9addMatrixPiS_S_i_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.u32 	%r6, [%rd8];
	ld.global.u32 	%r7, [%rd6];
	add.s32 	%r8, %r6, %r7;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.u32 	[%rd10], %r8;

BB0_2:
	ret;
}



Siguiendo el ensamblador: 
    - un thread que no hace la operacion ejecuta 11 instrucciones.
    - un thread que hace la operacion ejecuta 11 + 11 = 22 instrucciones.



Si tengo 47852x256 = 12250112 threads
#warps = 12250112/32 = 382816 warps

inst_executed = inst_per_warp*#warps = 382816*23.999882 = 9187539 (AHORA SI)
inst_per_warp es la media de instrucciones ejecutadas por cada warp. 