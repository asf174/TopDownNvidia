==138229== NVPROF is profiling process 138229, command: ../../../CUDA/bin/add_two_matrix2
-bash: ==138229==: command not found
alvaro@computador:~/Documents/Facultad/TopDownNvidia/Profiling/nvprof/exec$ sh run.sh
==138293== NVPROF is profiling process 138293, command: ../../../CUDA/bin/add_two_matrix2
NUm bloques 47852
==138293== Some kernel(s) will be replayed on device 0 in order to collect all events/metrics.
Replaying kernel "addMatrix(int*, int*, int*, int)" (done)
NUMBLOCKS: 47852 THREADS_PER_BLOCK: 256
==138293== Profiling application: ../../../CUDA/bin/add_two_matrix2
==138293== Profiling result:
==138293== Event result:
Invocations                                Event Name         Min         Max         Avg       Total
Device "GeForce GTX 1070 (0)"
    Kernel: addMatrix(int*, int*, int*, int)
          1                         elapsed_cycles_sm    15646452    15646452    15646452    15646452

==138293== Metric result:
Invocations                               Metric Name                        Metric Description         Min         Max         Avg
Device "GeForce GTX 1070 (0)"
    Kernel: addMatrix(int*, int*, int*, int)
          1                             inst_executed                     Instructions Executed     8804726     8804726     8804726
          1                                       ipc                              Executed IPC    0.568498    0.568498    0.568498
-------------------------------------------------------------------------------------------------------------------------------------
Tengo 47852 bloques con 256 threads. 
TOTAL THREADS : 12250112

La matriz tiene tamaño: 3500x3500 = 12250000

__global__ void addMatrix(int* a, int* b, int* result, int size)
{
	int idx = blockDim.x*blockIdx.x + threadIdx.x;
	if (idx < size)
		result[idx] = a[idx] + b[idx];
}



.visible .entry _Z9addMatrixPiS_S_i(
        .param .u64 _Z9addMatrixPiS_S_i_param_0,
        .param .u64 _Z9addMatrixPiS_S_i_param_1,
        .param .u64 _Z9addMatrixPiS_S_i_param_2,
        .param .u32 _Z9addMatrixPiS_S_i_param_3
)
{
        .reg .pred      %p<2>;
        .reg .b32       %r<9>;
        .reg .b64       %rd<11>;


        ld.param.u64    %rd1, [_Z9addMatrixPiS_S_i_param_0];
        ld.param.u64    %rd2, [_Z9addMatrixPiS_S_i_param_1];
        ld.param.u64    %rd3, [_Z9addMatrixPiS_S_i_param_2];
        ld.param.u32    %r2, [_Z9addMatrixPiS_S_i_param_3];
        mov.u32         %r3, %ntid.x;
        mov.u32         %r4, %ctaid.x;
        mov.u32         %r5, %tid.x;
        mad.lo.s32      %r1, %r3, %r4, %r5;
        setp.ge.s32     %p1, %r1, %r2;
        @%p1 bra        LBB0_2; 

        cvta.to.global.u64      %rd4, %rd1;
        mul.wide.s32    %rd5, %r1, 4;
        add.s64         %rd6, %rd4, %rd5;
        cvta.to.global.u64      %rd7, %rd2;
        add.s64         %rd8, %rd7, %rd5;
        ld.global.u32   %r6, [%rd8];
        ld.global.u32   %r7, [%rd6];
        add.s32         %r8, %r6, %r7;
        cvta.to.global.u64      %rd9, %rd3;
        add.s64         %rd10, %rd9, %rd5;
        st.global.u32   [%rd10], %r8;

LBB0_2:
        ret;

}


Siguiendo el ensamblador: 
    - un thread que no hace la operacion ejecuta 11 instrucciones.
    - un thread que hace la operacion ejecuta 11 + 11 = 22 instrucciones.


Hay 12250000 threads que ejecutarán 25 instrucciones y (12250112 - 12250000) que ejecutarán 14.

    TOTAL: 12250000x22 + (12250112 - 12250000)x11 = 269501232 instrucciones ejecutadas


